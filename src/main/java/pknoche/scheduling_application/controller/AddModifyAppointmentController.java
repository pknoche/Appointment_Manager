package pknoche.scheduling_application.controller;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.TextField;
import pknoche.scheduling_application.database.CustomerDAO;
import pknoche.scheduling_application.helper.DialogBox;
import pknoche.scheduling_application.helper.GUI_Navigator;
import pknoche.scheduling_application.helper.TimeConversion;
import pknoche.scheduling_application.model.Customer;

import java.net.URL;
import java.time.LocalTime;
import java.time.ZonedDateTime;
import java.util.ResourceBundle;

public class AddModifyAppointmentController implements Initializable {
    @FXML
    private TextField appointmentIdField;
    @FXML
    private ComboBox<?> contactCombo;
    @FXML
    private ComboBox<Customer> customerIdCombo;
    @FXML
    private DatePicker dateField;
    @FXML
    private TextField descriptionField;
    @FXML
    private ComboBox<LocalTime> endTimeCombo;
    @FXML
    private ComboBox<?> locationCombo;
    @FXML
    private ComboBox<LocalTime> startTimeCombo;
    @FXML
    private TextField titleField;
    @FXML
    private ComboBox<?> typeCombo;
    @FXML
    private ComboBox<?> userIdCombo;

    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        // set customerId combo box
        customerIdCombo.setItems(CustomerDAO.getAll());

        // populate start and end time combo boxes in 15 minute increments during business hours
        LocalTime start = TimeConversion.LocalOpenTime(); // opening time in user's local time zone
        LocalTime end = TimeConversion.LocalCloseTime(); // closing time in user's local time zone
        while(start.isBefore(end)) {
            startTimeCombo.getItems().add(start);
            endTimeCombo.getItems().add(start.plusMinutes(15));
            start = start.plusMinutes(15);
        }
    }

    @FXML
    void onCancelButtonClick(ActionEvent event) {
        if(DialogBox.generateConfirmationMessage("Are you sure you would like to cancel? The information entered will be discarded.")) { // if OK is clicked, then close window
            GUI_Navigator.closeStage(event);
        }
    }

    @FXML
    void onSaveButtonClick(ActionEvent event) {
        int appointmentId = -1; // appointment ID must contain a value to create a new Appointment object, but the real appointment ID will be auto-generated by the database, so -1 is inserted as a placeholder
        String title = titleField.getText();
        String description = descriptionField.getText(); //FIXME - finish implementing

    }
}
